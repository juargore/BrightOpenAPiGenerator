{{>licenseInfo}}
package {{apiPackage}}

{{#imports}}import {{import}}
{{/imports}}

import {{packageName}}.infrastructure.*
import {{packageName}}.network.RequestConfig
import {{packageName}}.network.RequestMethod
import {{packageName}}.network.request
import {{packageName}}.network.multipartFormData
import {{packageName}}.network.NetworkLogger
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.HttpClientFeature
import io.ktor.client.features.json.serializer.KotlinxSerializer
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import io.ktor.client.HttpClientConfig
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

{{#operations}}
{{#nonPublicApi}}internal {{/nonPublicApi}}class {{classname}}(
    private val baseUrl: String = ApiClient.BASE_URL,
    private val jsonSerializer: Json = ApiClient.JSON_DEFAULT,
    private val log: NetworkLogger
) : ApiClient(baseUrl, jsonSerializer, log) {

    {{#operation}}
    /**
     * {{summary}}
     * {{notes}}
    {{#allParams}} * @param {{{paramName}}} {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
    {{/allParams}} * @return {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
     */
    {{#returnType}}
    @Suppress("UNCHECKED_CAST")
    {{/returnType}}
    suspend fun {{operationId}}({{#allParams}}{{{paramName}}}: {{{dataType}}}{{^required}}?{{/required}}{{^-last}}, {{/-last}}{{/allParams}}): HttpResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Unit{{/returnType}}> {

        val localVariableAuthNames = listOf<String>({{#authMethods}}"{{name}}"{{^-last}}, {{/-last}}{{/authMethods}})

        {{#isMultipart}}
        val formData =
            multipartFormData {
        {{#formParams}}
                {{{paramName}}}?.apply { append("{{{baseName}}}", {{{paramName}}}) }
        {{/formParams}}
            }
        {{/isMultipart}}

        val localVariableBody = {{#hasBodyParam}}{{#bodyParam}}{{#isArray}}{{{paramName}}}?.run { {{operationIdCamelCase}}Request(this{{^isList}}.asList(){{/isList}}) }{{/isArray}}{{^isArray}}{{#isMap}}{{operationIdCamelCase}}Request({{{paramName}}}){{/isMap}}{{^isMap}}{{{paramName}}}{{/isMap}}{{/isArray}}{{/bodyParam}}{{/hasBodyParam}}
            {{^hasBodyParam}}
            {{#hasFormParams}}
            formData.body
            {{^isMultipart}}
            ParametersBuilder().also {
                {{#formParams}}
                {{{paramName}}}?.apply { it.append("{{{baseName}}}", {{{paramName}}}.toString()) }
                {{/formParams}}
            }.build()
            {{/isMultipart}}
            {{/hasFormParams}}
            {{^hasFormParams}}
            null
            {{/hasFormParams}}
            {{/hasBodyParam}}

        val localVariableQuery = mutableMapOf<String, List<String>>()
        {{#queryParams}}
        {{{paramName}}}?.apply { localVariableQuery["{{baseName}}"] = {{#isContainer}}toMultiValue(this, "{{collectionFormat}}"){{/isContainer}}{{^isContainer}}listOf("${{{paramName}}}"){{/isContainer}} }
        {{/queryParams}}

        val localVariableHeaders = mutableMapOf<String, String>()
        {{#headerParams}}
        {{{paramName}}}?.apply { localVariableHeaders["{{baseName}}"] = {{#isContainer}}this.joinToString(separator = collectionDelimiter("{{collectionFormat}}")){{/isContainer}}{{^isContainer}}this.toString(){{/isContainer}} }
        {{/headerParams}}
        {{#hasBodyParam}}
        localVariableHeaders["Content-Type"] = "application/json"
        {{/hasBodyParam}}
        {{#isMultipart}}
        localVariableHeaders["Content-Type"] = "multipart/form-data; boundary=${formData.boundary}"
        {{/isMultipart}}

            val localVariableConfig = RequestConfig(
            RequestMethod.{{httpMethod}},
            "${baseUrl}{{path}}"{{#pathParams}}.replace("{" + "{{baseName}}" + "}", "${{{paramName}}}"){{/pathParams}},
            query = localVariableQuery,
            headers = localVariableHeaders
        ).apply {
            updateForAuth(localVariableAuthNames)
        }

        return request(
            requestConfig = localVariableConfig,
            body = {{#hasBodyParam}}localVariableBody?.let {
                jsonSerializer.encodeToString(it).encodeToByteArray()
            }{{/hasBodyParam}}{{^hasBodyParam}}{{#hasFormParams}}{{#isMultipart}}localVariableBody{{/isMultipart}}{{^isMultipart}}null{{/isMultipart}}{{/hasFormParams}}{{^hasFormParams}}null{{/hasFormParams}}{{/hasBodyParam}},
            log = log
        ).rsp(jsonSerializer)
    }

{{#hasBodyParam}}
{{#bodyParam}}
{{#isArray}}{{>serial_wrapper_request_list}}{{/isArray}}{{#isMap}}{{>serial_wrapper_request_map}}{{/isMap}}
{{/bodyParam}}
{{/hasBodyParam}}
{{#isArray}}
{{>serial_wrapper_response_list}}
{{/isArray}}
{{#isMap}}
{{>serial_wrapper_response_map}}
{{/isMap}}

    {{/operation}}
}
{{/operations}}
